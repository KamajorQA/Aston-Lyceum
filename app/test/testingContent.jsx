import Image from 'next/image';
import s from './instructions.module.css';

function TestingContent() {
  const elString = {
    a: `
    <h2>Что такое Git?</h2>
    <p>
      <strong>
        Git — это система контроля версий (Control Version System,&nbsp;
        <em>CVS</em>)
      </strong>
    </p>
    <p>
      Если целая команда работает над одним проектом, неизбежна ситуация,
      когда несколько человек могут изменять один файл одновременно. Без CVS
      нормально разрабатывать проект в команде очень сложно: будет много
      конфликтов, которые приводят к риску потери части изменений в коде.
    </p>
    <p>
      Например, вы поменяли в файле index.html заголовок, а коллега
      одновременно с этим изменил тексты. И при этом изменений коллеги у вас
      нет, а у коллеги нет ваших изменений. Как быть? Вероятно, кому-то из
      вас, например вам, придется взять файл коллеги и внести туда свои
      изменения. А если изменений очень много? В общем, это будет настоящая
      головная боль, а в большой команде эта головная боль будет у всех.
    </p>
    <p>
      В общем, чтобы решить такие проблемы, и были придуманы системы контроля
      версий. А ситуация, когда есть две версии одного файла и нужно их как-то
      «слить», называется <em>конфликтом</em>.
    </p>
    <h2>Как работают CVS?</h2>
    <p>
      Принцип работы Git простой: вы вносите какие-то изменения в файлы. Затем
      CVS позволяет их зафиксировать (в виде так называемого&nbsp;
      <strong>
        <em>коммита</em>
      </strong>
      ): ваши изменения сохраняются, и к ним всегда можно вернуться.
    </p>
    <p>
      На самом деле существует доволно много тонкостей и команд для работы с
      Git, но для вас (я апеллирую к специлистам ручного тестирования&nbsp;
      <strong>Aston</strong>)&nbsp;<em>хорошая новость</em>&nbsp; в том,
      что&nbsp;
      <strong>вам не нужно вообще их использовать</strong>, т.к. не
      предполагается, что вы будете вносить какие-либо правки в сам код.
    </p>
    <p>
      Вам уже должны быть предоставлены&nbsp;
      <strong>
        ссылки и доступ к <em>репозиториям</em>
      </strong>
      &nbsp; (так называются рабочие папки проектов в системах Git) вашего
      проекта. Если что пинайте своих <strong>DevOps&apos;a и ПМа</strong>.
    </p>
    <p>
      Таким образом, половина приведенных здесь инструкций тебе на текущий
      момент не нужна (а если ты уже ежедневно вводишь в своем терминале:
    </p>
    <pre class="codeBlock">
      {' '}
      <code>npm run start</code>
    </pre>
    <p>
      ...то тебе вообще едва ли нужны эти инструкции, если только ты не сел за
      новый ПК и пытаешься вспомнить как снова ставить эти чертовы SSH-ключи).
    </p>
    <p>
      Однако, тебе будет в будущем намного проще работать, если сможешь
      пользоваться хотя бы командами &apos;&nbsp;<strong>git checkout</strong>
      &apos; и &apos;&nbsp;<strong>git pull</strong>&apos; чтобы не скачивать
      постоянно себе тестируемую ветку вручную из репозитория проекта.
    </p>
    <p>
      Так что все-таки полезно знать, что существуют разные Git системы (самые
      популярные - GitLab и GitHub) и как с ними работать. Разработка в &nbsp;
      <strong>Aston</strong> ведется в&nbsp;
      <strong>GitLab</strong>.
    </p>
`,
  };

  console.log(JSON.stringify(elString));

  return (
    <>
      <h2>Что такое Git?</h2>
      <p>
        <strong>
          Git — это система контроля версий (Control Version System,&nbsp;
          <em>CVS</em>)
        </strong>
      </p>
      <p>
        Если целая команда работает над одним проектом, неизбежна ситуация,
        когда несколько человек могут изменять один файл одновременно. Без CVS
        нормально разрабатывать проект в команде очень сложно: будет много
        конфликтов, которые приводят к риску потери части изменений в коде.
      </p>
      <p>
        Например, вы поменяли в файле index.html заголовок, а коллега
        одновременно с этим изменил тексты. И при этом изменений коллеги у вас
        нет, а у коллеги нет ваших изменений. Как быть? Вероятно, кому-то из
        вас, например вам, придется взять файл коллеги и внести туда свои
        изменения. А если изменений очень много? В общем, это будет настоящая
        головная боль, а в большой команде эта головная боль будет у всех.
      </p>
      <p>
        В общем, чтобы решить такие проблемы, и были придуманы системы контроля
        версий. А ситуация, когда есть две версии одного файла и нужно их как-то
        «слить», называется <em>конфликтом</em>.
      </p>
      <h2>Как работают CVS?</h2>
      <p>
        Принцип работы Git простой: вы вносите какие-то изменения в файлы. Затем
        CVS позволяет их зафиксировать (в виде так называемого&nbsp;
        <strong>
          <em>коммита</em>
        </strong>
        ): ваши изменения сохраняются, и к ним всегда можно вернуться.
      </p>
      <p>
        На самом деле существует доволно много тонкостей и команд для работы с
        Git, но для вас (я апеллирую к специлистам ручного тестирования&nbsp;
        <strong>Aston</strong>)&nbsp;<em>хорошая новость</em>&nbsp; в том,
        что&nbsp;
        <strong>вам не нужно вообще их использовать</strong>, т.к. не
        предполагается, что вы будете вносить какие-либо правки в сам код.
      </p>
      <p>
        Вам уже должны быть предоставлены&nbsp;
        <strong>
          ссылки и доступ к <em>репозиториям</em>
        </strong>
        &nbsp; (так называются рабочие папки проектов в системах Git) вашего
        проекта. Если что пинайте своих <strong>DevOps&apos;a и ПМа</strong>.
      </p>
      <p>
        Таким образом, половина приведенных здесь инструкций тебе на текущий
        момент не нужна (а если ты уже ежедневно вводишь в своем терминале:
      </p>
      <pre class="codeBlock">
        {' '}
        <code>npm run start</code>
      </pre>
      <p>
        ...то тебе вообще едва ли нужны эти инструкции, если только ты не сел за
        новый ПК и пытаешься вспомнить как снова ставить эти чертовы SSH-ключи).
      </p>
      <p>
        Однако, тебе будет в будущем намного проще работать, если сможешь
        пользоваться хотя бы командами &apos;&nbsp;<strong>git checkout</strong>
        &apos; и &apos;&nbsp;<strong>git pull</strong>&apos; чтобы не скачивать
        постоянно себе тестируемую ветку вручную из репозитория проекта.
      </p>
      <p>
        Так что все-таки полезно знать, что существуют разные Git системы (самые
        популярные - GitLab и GitHub) и как с ними работать. Разработка в &nbsp;
        <strong>Aston</strong> ведется в&nbsp;
        <strong>GitLab</strong>.
      </p>
    </>
  );
}

export { TestingContent };
